dfG = summaryBy(mOFC ~ 1, data = HED.ROI.HED.TASK,
FUN = function(x) { c(m = mean(x, na.rm = T),
s = se(x, na.rm = T)) } )
pp <- ggplot(HED.ROI.HED.TASK, aes(x = 0.5, y = mOFC)) +
geom_abline(slope=0, intercept=0, linetype = "dashed", color = "gray") +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, color = NA, fill = pal[3], width = 0.5) +
geom_jitter(alpha = .6, color = pal[3], width = 0.02) +
geom_crossbar(data = dfG, aes(y =  mOFC.m, ymin= mOFC.m-mOFC.s, ymax= mOFC.m+mOFC.s),
width = 0.2 , alpha = 0.1, color = pal[3])+
ylab('Beta estimates (a.u.)') +
xlab('') +
scale_y_continuous(expand = c(-0, 0), breaks = c(seq.int(-0.035,0.06, by = 0.015)), limits = c(-0.035,0.06))  +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(0.2,0.8, by = 0.25)), limits = c(0.2,0.8))  +
theme_bw()
ppp <- pp + averaged_theme_ttest
pdf(file.path(figures_path,'Figure_mOFC_HED.pdf'))
print(ppp)
dev.off()
dfG = summaryBy(NAc_shell_core ~ 1, data = HED.ROI.HED.TASK,
FUN = function(x) { c(m = mean(x, na.rm = T),
s = se(x, na.rm = T)) } )
pp <- ggplot(HED.ROI.HED.TASK, aes(x = 0.5, y = NAc_shell_core)) +
geom_abline(slope=0, intercept=0, linetype = "dashed", color = "gray") +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, color = NA, fill = pal[3], width = 0.5) +
geom_jitter(alpha = .6, color = pal[3], width = 0.02) +
geom_crossbar(data = dfG, aes(y =  NAc_shell_core.m, ymin= NAc_shell_core.m-NAc_shell_core.s, ymax= NAc_shell_core.m+NAc_shell_core.s),
width = 0.2 , alpha = 0.1, color = pal[3])+
ylab('Beta estimates (a.u.)') +
xlab('') +
scale_y_continuous(expand = c(-0, 0), breaks = c(seq.int(-0.035,0.06, by = 0.015)), limits = c(-0.035,0.06))  +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(0.2,0.8, by = 0.25)), limits = c(0.2,0.8))  +
theme_bw()
ppp <- pp + averaged_theme_ttest
HED.ROI.TASK.HED
HED.ROI.HED.TASK <- merge(PIT.index, ROI_HED.lik, by = 'ID')
HED.ROI.HED.TASK
HED.ROI.HED.TASK <- rename.variable(HED.ROI.HED.TASK, 'HED_NACcoreshell_betas', 'NAc_shell_core')
HED.ROI.HED.TASK <- rename.variable(HED.ROI.HED.TASK, 'HED_mOFC_betas', 'mOFC')
t.test(HED.ROI.HED.TASK$NAc_shell_core)
t.test(HED.ROI.HED.TASK$mOFC)
CM.HED.ROI.PIT = CM.HED.ROI.PIT %>% select(-one_of('mOFC','HED_NACshell_betas'))
CM.HED.ROI.HED = HED.ROI.HED.TASK
CM.HED.ROI.HED = CM.HED.ROI.HED %>% select(-one_of('mOFC','HED_NACshell_betas'))
CM.HED.ROI.HED <- rename.variable(CM.HED.ROI.HED, 'NAc_shell_core', 'beta')
CM.HED.ROI.HED
CM.HED.ROI.HED = HED.ROI.HED.TASK
CM.HED.ROI.HED
HED.ROI.HED.TASK
HED.ROI.HED.TASK
ROI_HED.lik
HED.ROI.HED.TASK <- ROI_HED.lik
HED.ROI.HED.TASK <- rename.variable(HED.ROI.HED.TASK, 'HED_NACcoreshell_betas', 'NAc_shell_core')
HED.ROI.HED.TASK <- rename.variable(HED.ROI.HED.TASK, 'HED_mOFC_betas', 'mOFC')
t.test(HED.ROI.HED.TASK$NAc_shell_core)
t.test(HED.ROI.HED.TASK$mOFC)
CM.HED.ROI.HED = HED.ROI.HED.TASK
CM.HED.ROI.HED
CM.HED.ROI.HED = CM.HED.ROI.HED %>% select(-one_of('mOFC','HED_NACshell_betas'))
CM.HED.ROI.HED <- rename.variable(CM.HED.ROI.HED, 'NAc_shell_core', 'beta')
CM.HED.ROI.HED
CM.HED.ROI.HED = HED.ROI.HED.TASK
CM.HED.ROI.HED = CM.HED.ROI.HED %>% select(-one_of('mOFC','HED_NACshell_betas'))
CM.HED.ROI.HED <- rename.variable(CM.HED.ROI.HED, 'NAc_shell_core', 'beta')
CM.HED.ROI.HED$ROI_type = 'hed_ROI'
CM.HED.ROI.HED
PIT.ROI.HED.TASK.long
# ------------------------------------- PIT ROI during HED -----------------------------------------
PIT.ROI.HED.TASK <- merge(PIT.index, ROI_PIT.lik, by = 'ID')
# rename variables for this database
PIT.ROI.HED.TASK <- rename.variable(PIT.ROI.HED.TASK, 'PIT_EFF_VSCA_right_betas', 'NAc_CA_right')
PIT.ROI.HED.TASK <- rename.variable(PIT.ROI.HED.TASK, 'PIT_Eff_VSCA_left_betas', 'NAc_CA_left')
# remove ROI from CS+ vs CS- independent from effort
PIT.ROI.HED.TASK %>% select(-one_of('PIT_CS_NACschell_right_betas','PIT_CS_NACshell_left_betas'))
# long format for left and right
PIT.ROI.HED.TASK.long <- gather(PIT.ROI.HED.TASK, ROI , beta, NAc_CA_right:NAc_CA_left, factor_key=TRUE)
# -------------------------------- STAT
VS_CA_lik.stat     <- aov_car(beta ~ ROI + Error (ID/ROI), data = PIT.ROI.HED.TASK.long, factorize = F, anova_table = list(es = "pes"))
# since there is no ROI effect let's compute the main effect on the average
PIT.ROI.HED.TASK.means <- aggregate(PIT.ROI.HED.TASK.long$beta, by = list(PIT.ROI.HED.TASK.long$ID), FUN='mean') # extract means
colnames(PIT.ROI.HED.TASK.means) <- c('ID','betas')
t.test(PIT.ROI.HED.TASK.means$beta)
# ----------------------------- PLOT
dfG = summaryBy(betas ~ 1, data = PIT.ROI.HED.TASK.means,
FUN = function(x) { c(m = mean(x, na.rm = T),
s = se(x, na.rm = T)) } )
pp <- ggplot(PIT.ROI.HED.TASK.means, aes(x = 0.5, y = betas)) +
geom_abline(slope=0, intercept=0, linetype = "dashed", color = "gray") +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, color = NA, fill = pal[3], width = 0.5) +
geom_jitter(alpha = .6, color = pal[3], width = 0.02) +
geom_crossbar(data = dfG, aes(y =  betas.m, ymin= betas.m-betas.s, ymax= betas.m+betas.s),
width = 0.2 , alpha = 0.1, color = pal[3])+
ylab('Beta estimates (a.u.)') +
xlab('') +
#scale_y_continuous(expand = c(-0, 0), breaks = c(seq.int(-0.035,0.06, by = 0.015)), limits = c(-0.035,0.06))  +
scale_x_continuous(expand = c(0, 0), breaks = c(seq.int(0.2,0.8, by = 0.25)), limits = c(0.2,0.8))  +
theme_bw()
ppp <- pp + averaged_theme_ttest
pdf(file.path(figures_path,'Figure_NAc_CA_HED.pdf'))
print(ppp)
dev.off()
CM.PIT.ROI.PIT = select(PIT.ROI.HED.TASK.long, 'ID','deltaCS_R','ROI_type','beta')
CM.PIT.ROI.PIT = select(PIT.ROI.HED.TASK.long, 'ID','deltaCS_R','beta')
CM.PIT.ROI.PIT$ROI_type = 'pav_ROI'
HED.ROI.COMPARE <- join (CM.HED.ROI.PIT, CM.PIT.ROI.PIT, type = 'full')
HED.ROI.COMPARE.means <- aggregate(HED.ROI.COMPARE$beta,
by = list(HED.ROI.COMPARE$ID,HED.ROI.COMPARE$ROI_type), FUN='mean') # extract means
HED.ROI.COMPARE.means <- aggregate(HED.ROI.COMPARE$beta,
by = list(HED.ROI.COMPARE$ID,HED.ROI.COMPARE$ROI_type), FUN='mean') # extract means
colnames(HED.ROI.COMPARE.means) <- c('ID','ROI_type','beta')
HED.ROI.COMPARE.means$ROI_type = factor(HED.ROI.COMPARE.means$ROI_type)
directHEDroi.stat     <- aov_car(beta ~ ROI_type  + Error (ID/ROI_type), data = HED.ROI.COMPARE,
factorize = F, anova_table = list(es = "pes"))
directHEDroi.stat
intROIHED.BF <- anovaBF(beta ~ ROI_type + ID, data = HED.ROI.COMPARE.means,
whichRandom = "ID", iterations = 50000)
intROIHED.BF <- recompute(intROIHED.BF, iterations = 50000)
intROIHED.BF
F_to_eta2(f = c(4.79), df = c(1), df_error = c(23)) # effect sizes (90%CI)
VS_CA_lik.stat
t.test(PIT.ROI.HED.TASK.means$beta)
aov_car(beta  ~1 + Error (ID), data = PIT.ROI.HED.TASK.means, factorize = F, anova_table = list(es = "pes"))
PIT.ROI.HED.TASK.means
colnames(PIT.ROI.HED.TASK.means) <- c('ID','betas')
PIT.ROI.HED.TASK.means <- aggregate(PIT.ROI.HED.TASK.long$beta, by = list(PIT.ROI.HED.TASK.long$ID), FUN='mean') # extract means
colnames(PIT.ROI.HED.TASK.means) <- c('ID','betas')
t.test(PIT.ROI.HED.TASK.means$beta)
PIT.ROI.HED.TASK.means$beta
PIT.ROI.HED.TASK.means
t.test(PIT.ROI.HED.TASK.means$betas)
aov_car(betas  ~1 + Error (ID), data = PIT.ROI.HED.TASK.means, factorize = F, anova_table = list(es = "pes"))
aov_car(betas  ~ 1 + Error (ID), data = PIT.ROI.HED.TASK.means)
PIT.ROI.HED.TASK.means
aov_car(betas ~ 1 + Error (ID), data = PIT.ROI.HED.TASK.means)
aov_car(beta ~ 1 + Error (ID/ROI), data = PIT.ROI.HED.TASK.long, factorize = F, anova_table = list(es = "pes"))
aov_car(betas ~ 1 + Error (ID/ROI), data = PIT.ROI.HED.TASK.long, factorize = F, anova_table = list(es = "pes"))
t.test(PIT.ROI.HED.TASK.means$betas)
VS_CA_lik.stat     <- aov_car(beta ~ 1 + Error (ID), data = PIT.ROI.HED.TASK.means, factorize = F, anova_table = list(es = "pes"))
VS_CA_lik.stat     <- aov_car(betas ~ 1 + Error (ID), data = PIT.ROI.HED.TASK.means, factorize = F, anova_table = list(es = "pes"))
VS_CA_lik.stat
lm(betas ~ 1, data = PIT.ROI.HED.TASK.mean)
lm(betas ~ 1, data = PIT.ROI.HED.TASK.means
)
anova(lm(betas ~ 1, data = PIT.ROI.HED.TASK.means))
Summary(lm(betas ~ 1, data = PIT.ROI.HED.TASK.means))
summary(lm(betas ~ 1, data = PIT.ROI.HED.TASK.means))
generalTestBF(beta ~ 1 + ID, data = PIT.ROI.COMPARE.means,
whichRandom = "ID", iterations = 50000)
generalTestBF(beta ~ 1 + ID, data = PIT.ROI.HED.TASK.means,
whichRandom = "ID", iterations = 50000)
generalTestBF(betas ~ 1 + ID, data = PIT.ROI.HED.TASK.means,
whichRandom = "ID", iterations = 50000)
lmBF(betas ~ 1 + ID, data = PIT.ROI.HED.TASK.means,
whichRandom = "ID", iterations = 50000)
lmBF(betas ~ 1 + ID, data = PIT.ROI.HED.TASK.means, iterations = 50000)
lmBF(betas ~ 1 + ID, data = PIT.ROI.HED.TASK.means,iterations = 50000)
summary(lm(betas ~ 1, data = PIT.ROI.HED.TASK.means))
lmBF(betas ~ 1, data = PIT.ROI.HED.TASK.means,iterations = 50000)
generalTestBF(betas ~ 1, data = PIT.ROI.HED.TASK.means,iterations = 50000)
generalTestBF(betas ~ 1 + ID, data = PIT.ROI.HED.TASK.means,iterations = 50000)
generalTestBF(betas ~ 1 + ID, data = PIT.ROI.HED.TASK.means,iterations = 50000,whichRandom = "ID")
lmBF(betas ~ 1 + ID, data = PIT.ROI.HED.TASK.means,iterations = 50000,whichRandom = "ID")
pacman::p_load(apaTables, MBESS, afex, car, ggplot2, dplyr, plyr, tidyr,
reshape, Hmisc, Rmisc,  ggpubr, ez, gridExtra, plotrix,
lsmeans, BayesFactor, effectsize, devtools,misty,questionr,ggplot, ggExtra,
doBy,BayesFactor,BayesianFirstAid)
bayes.t.test(PIT.ROI.HED.TASK.means$betas)
install.packages(BayesianFirstAid)
install.packages('BayesianFirstAid')
ttestBF(PIT.ROI.HED.TASK.means$betas)
t.test(PIT.ROI.HED.TASK.means$betas)
mean(PIT.ROI.HED.TASK.means$betas)
source(paste(analysis_path, "/functions/cohen_d_ci.R", sep = ""))
source(paste(analysis_path, "/functions/cohen_d_ci.R", sep = ""))
cohen_d_ci(PIT.ROI.HED.TASK.means$betas, conf.level = .95)
HED.ROI.HED.TASK <- ROI_HED.lik
HED.ROI.HED.TASK <- rename.variable(HED.ROI.HED.TASK, 'HED_NACcoreshell_betas', 'NAc_shell_core')
HED.ROI.HED.TASK <- rename.variable(HED.ROI.HED.TASK, 'HED_mOFC_betas', 'mOFC')
E
t.test(HED.ROI.HED.TASK$NAc_shell_core)
ttestBF(HED.ROI.HED.TASK$NAc_shell_core)
cohen_d_ci(HED.ROI.HED.TASK$NAc_shell_core, conf.level = .95)
ttestBF(HED.ROI.HED.TASK$mOFC)
cohen_d_ci(HED.ROI.HED.TASK$mOFC, conf.level = .95)
HED.ROI.TASK.PIT <- merge(PIT.index, ROI_HED.CSpCSm, by = 'ID')
HED.ROI.TASK.PIT <- rename.variable(HED.ROI.TASK.PIT, 'HED_NACcoreshell_betas', 'NAc_shell_core')
HED.ROI.TASK.PIT <- rename.variable(HED.ROI.TASK.PIT, 'HED_mOFC_betas', 'mOFC')
HED.ROI.TASK.PIT$ROI_type = 'hed_ROI'
mOFC_eff.stat             <- aov_car(mOFC ~ deltaCS_R + Error (ID), data = HED.ROI.TASK.PIT,
observed = c("deltaCS_R"), factorize = F, anova_table = list(es = "pes")) # no
NAcShellCore_eff.stat     <- aov_car(NAc_shell_core ~ deltaCS_R + Error (ID), data = HED.ROI.TASK.PIT,
observed = c("deltaCS_R"), factorize = F, anova_table = list(es = "pes")) # no
mOFC_eff.stat             <- aov_car(mOFC ~ deltaCS_R + Error (ID), data = HED.ROI.TASK.PIT,
observed = c("deltaCS_R"), factorize = F, anova_table = list(es = "pes")) # no
mOFC_eff.stat
intROIPIT.BF <- generalTestBF(mOFC ~ deltaCS_R + ID, data = HED.ROI.TASK.PIT,
whichRandom = "ID", iterations = 50000)
intROIPIT.BF
HED.ROI.TASK.PIT
intROIPIT.BF <- generalTestBF(mOFC ~ deltaCS_R + ID, data = HED.ROI.TASK.PIT,
whichRandom = "ID", iterations = 50000)
intROIPIT.BF <- lmBF(mOFC ~ deltaCS_R + ID, data = HED.ROI.TASK.PIT,
whichRandom = "ID", iterations = 50000)
intROIPIT.BF <- lmBF(mOFC ~ deltaCS_R + ID, data = HED.ROI.TASK.PIT,
whichRandom = "ID", iterations = 50000)
intROIPIT.BF
mOFC_eff.stat             <- aov_car(mOFC ~ deltaCS_R + Error (ID), data = HED.ROI.TASK.PIT,
observed = c("deltaCS_R"), factorize = F, anova_table = list(es = "pes")) # no
mOFC_eff.stat
F_to_eta2(f = c(0.06), df = c(1), df_error = c(22)) # effect sizes (90%CI)
intROIPIT.BF <- lmBF(mOFC ~ deltaCS_R + ID, data = HED.ROI.TASK.PIT,
whichRandom = "ID", iterations = 50000)
intROIPIT.BF <- recompute(intROIPIT.BF , iterations = 50000)
intROIPIT.BF
NAcShellCore_eff.stat     <- aov_car(NAc_shell_core ~ deltaCS_R + Error (ID), data = HED.ROI.TASK.PIT,
observed = c("deltaCS_R"), factorize = F, anova_table = list(es = "pes")) # no
NAcShellCore_eff.stat     <- aov_car(NAc_shell_core ~ deltaCS_R + Error (ID), data = HED.ROI.TASK.PIT,
observed = c("deltaCS_R"), factorize = F, anova_table = list(es = "pes")) # no
NAcShellCore_eff.stat
F_to_eta2(f = c(0.69), df = c(1), df_error = c(22)) # effect sizes (90%CI)
intROIPIT.BF <- lmBF(NAc_shell_core ~ deltaCS_R + ID, data = HED.ROI.TASK.PIT,
whichRandom = "ID", iterations = 50000)
intROIPIT.BF <- recompute(intROIPIT.BF , iterations = 50000)
intROIPIT.BF <- recompute(intROIPIT.BF , iterations = 50000)
intROIPIT.BF
8'000000/ 4000
)
)
)
)
9
))))))
8000000/4000
2000/360
library(car)
library(afex)
library(doBy)
library(ggplot2)
library(ggExtra)
library(sjstats)
library(jtools)
library(plyr)
library(dplyr)
library(tidyr)
library(psych)
library(devtools)
full_path       <- dirname(rstudioapi::getActiveDocumentContext()$path) # this gets the path were we are in right noe
pos             <- regexpr("QUESTADD", full_path) # we want the path to the root folder
home_path       <- substr(full_path, 1, pos+7)
figures_path    <- file.path(home_path, 'analysis/figures') # here we will save the pdf of our figures
utilities_path  <- file.path(home_path, 'analysis/R') # here we will put any homemade function we might beed
setwd (home_path)
B1 <- read.csv(file.path(home_path,'analysis/data/B1_compiled.csv'), check.names = F) # read in dataset
B2 <- read.csv(file.path(home_path,'analysis/data/B2_compiled.csv'), check.names = F) # read in dataset
B3 <- read.csv(file.path(home_path,'analysis/data/B3_compiled.csv'), check.names = F) # read in dataset
B2$dataset = 'B2'
B1$dataset = 'B1'
B3$dataset = 'B3'
B2$sub = B2$sub+ 200
B3$sub = B3$sub+ 300
TMP  <- join (B3, B1, type = 'full')
QUEST <- join (TMP, B2, type = 'full')
QUEST <- subset(QUEST, sub != 'NA') # remove missing lines
count(QUEST, c("sub")) # how many participants
age = summaryBy(Age ~ 1, data = QUEST,
FUN = function(x) { c(m = mean(x, na.rm = T) , s = sd(x, na.rm = T)) } )
QUEST$Genre = factor(QUEST$Genre)
Genre = summaryBy(Genre ~ 1, data = QUEST,
FUN = function(x) { c(m = count(x, na.rm = T))} )
OCIR.des = summaryBy(OCIR_total ~ 1, data = QUEST,
FUN = function(x) { c(m = mean(x, na.rm = T) , s = sd(x, na.rm = T), min = min(x, na.rm = T), max = max (x, na.rm = T)) } )
OCIR.des.wash = summaryBy(OCIR_Washing ~ 1, data = QUEST,
FUN = function(x) { c(m = mean(x, na.rm = T) , s = sd(x, na.rm = T), min = min(x, na.rm = T), max = max (x, na.rm = T)) } )
OCIR.des.check = summaryBy(OCIR_checking ~ 1, data = QUEST,
FUN = function(x) { c(m = mean(x, na.rm = T) , s = sd(x, na.rm = T), min = min(x, na.rm = T), max = max (x, na.rm = T)) } )
OCIR.des.order = summaryBy(OCIR_ordering ~ 1, data = QUEST,
FUN = function(x) { c(m = mean(x, na.rm = T) , s = sd(x, na.rm = T), min = min(x, na.rm = T), max = max (x, na.rm = T)) } )
OCIR.des.obsess = summaryBy(OCIR_obsessing ~ 1, data = QUEST,
FUN = function(x) { c(m = mean(x, na.rm = T) , s = sd(x, na.rm = T), min = min(x, na.rm = T), max = max (x, na.rm = T)) } )
OCIR.des.hoard = summaryBy(OCIR_hoarding ~ 1, data = QUEST,
FUN = function(x) { c(m = mean(x, na.rm = T) , s = sd(x, na.rm = T), min = min(x, na.rm = T), max = max (x, na.rm = T)) } )
OCIR.des.neutr = summaryBy(OCIR_neutralising ~ 1, data = QUEST,
FUN = function(x) { c(m = mean(x, na.rm = T) , s = sd(x, na.rm = T), min = min(x, na.rm = T), max = max (x, na.rm = T)) } )
QABB.des = summaryBy(QABB_total ~ 1, data = QUEST,
FUN = function(x) { c(m = mean(x, na.rm = T) , s = sd(x, na.rm = T), min = min(x, na.rm = T), max = max (x, na.rm = T)) } )
OCIR.des
https://unige.zoom.us/j/2609029094
hist(QUESt$EAT26_total)
hist(QUEST$EAT26_total)
STAIT.des = summaryBy(STAIT_total ~ 1, data = QUEST,
FUN = function(x) { c(m = mean(x, na.rm = T) , s = sd(x, na.rm = T), min = min(x, na.rm = T), max = max (x, na.rm = T)) } )
STAIS.des = summaryBy(STAIS_total ~ 1, data = QUEST,
FUN = function(x) { c(m = mean(x, na.rm = T) , s = sd(x, na.rm = T), min = min(x, na.rm = T), max = max (x, na.rm = T)) } )
cor(STAIT_total,STAIS_total)
cor(QUEST$STAIT_total,QUEST$STAIS_total)
cor(QUEST$STAIT_total,QUEST$STAIS_total, na.rm =T )
hist(QUEST$PCLS.des)
hist(QUEST$PCLS_total)
col = paste("COHS[",1:27,"]", sep="")
db.COHS <- QUEST[col]
r.subscale = cor(db.COHS, use = "pairwise.complete.obs")
cor.plot(db.COHS,numbers=TRUE,main="correlation matrix")
describe (db.COHS)
QUEST$`COHS[19]`
len(QUEST$`COHS[19]`)
lenght(QUEST$`COHS[19]`)
length(QUEST$`COHS[19]`)
length(QUEST$dataset)
(QUEST$dataset)
length(QUEST$`COHS[19]`)
QUEST$`COHS[19]`
QUEST$`COHS[01]`
QUEST$`COHS[1]`
B2$`COHS[109]`
B2$`COHS[19]`
library(jtools)
library(plyr)
library(dplyr)
library(tidyr)
library(devtools)
full_path       <- dirname(rstudioapi::getActiveDocumentContext()$path) # this gets the path were we are in right noe
pos             <- regexpr("QUESTADD", full_path) # we want the path to the root folder
home_path       <- substr(full_path, 1, pos+7)
setwd (home_path)
B2_P1 <- read.csv(file.path(home_path,'data/B2/CLEAN/B2_HABIT_PART1_SORTED.csv'), check.names = F) # read in dataset
B2_P2 <- read.csv(file.path(home_path,'data/B2/CLEAN/B2_HABIT_PART2_SORTED.csv'), check.names = F)# read in dataset
B2_P1$`COHS[19]`
if(!require(pacman)) {
install.packages("pacman")
library(pacman)
}
pacman::p_load(apaTables, MBESS, afex, car, ggplot2, dplyr, plyr, tidyr,
reshape, Hmisc, Rmisc,  ggpubr, ez, gridExtra, plotrix,
lsmeans, BayesFactor, effectsize, devtools,misty)
if(!require(devtools)) {
install.packages("devtools")
library(devtools)
}
devtools::source_gist("2a1bb0133ff568cbe28d",
filename = "geom_flat_violin.R")
home_path       <- '/Users/evapool/Documents/my_github/VS_AffectiveResponse/'
analysis_path <- file.path(home_path, 'behavioral')
figures_path <- file.path(analysis_path, 'figures')
setwd(analysis_path)
data_path <- file.path(home_path,'DERIVATIVES/BEHAV')
PAV  <- read.delim(file.path(analysis_path, 'databases/REWOD_PAVCOND_ses_first.txt'), header = T, sep ='') # read in dataset
INST <- read.delim(file.path(analysis_path, 'databases/REWOD_INSTRU_ses_first.txt'), header = T, sep ='') # read in dataset
PIT  <- read.delim(file.path(analysis_path, 'databases/REWOD_PIT_ses_second.txt'), header = T, sep ='') # read in dataset
HED  <- read.delim(file.path(analysis_path, 'databases/REWOD_HEDONIC_ses_second.txt'), header = T, sep ='') # read in dataset
averaged_theme <- theme_bw(base_size = 32, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 32, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 32),
axis.title.y = element_text(size =  32),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
timeline_theme <- theme_bw(base_size = 32, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 32, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text  = element_text(size =  14),
legend.title = element_text(size =  14),
axis.title.x = element_text(size = 32),
axis.title.y = element_text(size =  32),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
pal = viridis::inferno(n=5)
PAV$id               <- factor(PAV$id)
PAV$trial            <- factor(PAV$trial)
PAV$session          <- factor(PAV$session)
PAV$condition        <- factor(PAV$condition)
PAV$RT               <- PAV$RT * 1000
PAV.clean <- filter(PAV, rounds == 1)
PAV.clean$condition <- droplevels(PAV.clean$condition, exclude = "Baseline")
full = length(PAV.clean$RT)
PAV.clean <- filter(PAV.clean, RT >= 100) # min RT is 106ms
PAV.clean <- ddply(PAV.clean, .(id), transform, RTm = mean(RT))
PAV.clean <- ddply(PAV.clean, .(id), transform, RTsd = sd(RT))
PAV.clean <- filter(PAV.clean, RT <= RTm+3*RTsd)
clean= length(PAV.clean$RT)
PAV.clean <- ddply(PAV.clean, .(id), transform, RTsd = sd(RT))
PAV.clean <- filter(PAV.clean, RT <= RTm+3*RTsd)
clean= length(PAV.clean$RT)
dropped = full-clean
(dropped*100)/full
PAV.means <- aggregate(PAV.clean$RT, by = list(PAV.clean$id, PAV.clean$condition, PAV.clean$liking_ratings), FUN='mean') # extract means
colnames(PAV.means) <- c('id','condition','liking','RT')
anova.RT <- aov_car(RT ~ condition+ Error (id/condition), data = PAV.means, anova_table = list(correction = "GG", es = "pes"))
F_to_eta2(f = c(6.67), df = c(1), df_error = c(23))
RT.BF <- anovaBF(RT ~ condition  + id, data = PAV.means,
whichRandom = "id", iterations = 50000)
RT.BF <- recompute(RT.BF, iterations = 50000)
RT.BF
anova.liking <- aov_car(liking ~ condition+ Error (id/condition), data = PAV.means, anova_table = list(correction = "GG", es = "pes"))
F_to_eta2(f = c(6.70), df = c(1), df_error = c(23))
liking.BF <- anovaBF(liking ~ condition  + id, data = PAV.means,
whichRandom = "id", iterations = 50000)
liking.BF <- recompute(liking.BF, iterations = 50000)
liking.BF
PAV.means$condition  <- dplyr::recode(PAV.means$condition, "CSplus" = "CS+", "CSminus" = "CS-" )
dfL <- summarySEwithin(PAV.means,
measurevar = "liking",
withinvars = "condition",
idvar = "id")
dfL$cond <- ifelse(dfL$condition == "CS+", -0.25, 0.25)
PAV.means$cond <- ifelse(PAV.means$condition == "CS+", -0.25, 0.25)
set.seed(666)
PAV.means <- PAV.means %>% mutate(condjit = jitter(as.numeric(cond), 0.3),
grouping = interaction(id, cond))
pp <- ggplot(PAV.means, aes(x = cond, y = liking,
fill = condition, color = condition)) +
geom_line(aes(x = condjit, group = id, y = liking), alpha = .5, size = 0.5, color = 'gray' ) +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, aes(fill = condition, color = NA)) +
geom_point(aes(x = condjit), alpha = .3) +
geom_crossbar(data = dfL, aes(y = liking, ymin=liking-se, ymax=liking+se), width = 0.2 , alpha = 0.1)+
ylab('Liking Ratings')+
xlab('Conditioned stimulus')+
scale_y_continuous(expand = c(0, 0), breaks = c(seq.int(0,100, by = 25)), limits = c(-0.5,100.5)) +
scale_x_continuous(labels=c("CS+", "CS-"),breaks = c(-.25,.25), limits = c(-.5,.5)) +
scale_fill_manual(values=c("CS+"= pal[2], "CS-"=  pal[1]), guide = 'none') +
scale_color_manual(values=c("CS+"= pal[2], "CS-"=  pal[1]), guide = 'none') +
theme_bw()
ppp <- pp + averaged_theme
if(!require(pacman)) {
install.packages("pacman")
library(pacman)
}
pacman::p_load(apaTables, MBESS, afex, car, ggplot2, dplyr, plyr, tidyr,
reshape, Hmisc, Rmisc,  ggpubr, ez, gridExtra, plotrix,
lsmeans, BayesFactor, effectsize, devtools,misty,questionr,ggplot, ggExtra,
doBy,BayesFactor,BayesianFirstAid)
if(!require(devtools)) {
install.packages("devtools")
library(devtools)
}
devtools::source_gist("2a1bb0133ff568cbe28d",
filename = "geom_flat_violin.R")
home_path       <- '/Users/evapool/Documents/my_github/VS_AffectiveResponse/'
analysis_path <- file.path(home_path, 'behavioral')
covariatePIT_path <- file.path(home_path, 'univariate/PIT/GLM-between/group_covariates')
covariateHED_path <- file.path(home_path, 'univariate/hedonic/GLM-between/group_covariates')
figures_path <- file.path(analysis_path, 'figures')
setwd(analysis_path)
source(paste(analysis_path, "/functions/cohen_d_ci.R", sep = ""))
data_path <- file.path(home_path,'DERIVATIVES/BEHAV')
ROI_HED.lik     <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_Hed_TASK_Hed.txt'), header = T, sep ='')
ROI_HED.CSpCSm  <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_Hed_task_PIT.txt'), header = T, sep ='')
ROI_PIT.lik     <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_PIT_TASK_hedonic.txt'), header = T, sep ='')
ROI_PIT.CSpCSm  <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_PIT_TASK_PIT.txt'), header = T, sep ='')
PAV  <- read.delim(file.path(analysis_path, 'databases/REWOD_PAVCOND_ses_first.txt'), header = T, sep ='') # read in dataset
INST <- read.delim(file.path(analysis_path, 'databases/REWOD_INSTRU_ses_first.txt'), header = T, sep ='') # read in dataset
PIT  <- read.delim(file.path(analysis_path, 'databases/REWOD_PIT_ses_second.txt'), header = T, sep ='') # read in dataset
HED  <- read.delim(file.path(analysis_path, 'databases/REWOD_HEDONIC_ses_second.txt'), header = T, sep ='') # read in dataset
ROI_HED.lik     <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_Hed_TASK_Hed.txt'), header = T, sep ='')
ROI_HED.CSpCSm  <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_Hed_task_PIT.txt'), header = T, sep ='')
ROI_PIT.lik     <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_PIT_TASK_hedonic.txt'), header = T, sep ='')
ROI_PIT.CSpCSm  <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_PIT_TASK_PIT.txt'), header = T, sep ='')
analysis_path <- file.path(home_path, 'behavioral')
covariatePIT_path <- file.path(home_path, 'univariate/PIT/GLM-between/group_covariates')
covariateHED_path <- file.path(home_path, 'univariate/hedonic/GLM-between/group_covariates')
figures_path <- file.path(analysis_path, 'figures')
setwd(analysis_path)
source(paste(analysis_path, "/functions/cohen_d_ci.R", sep = ""))
PAV  <- read.delim(file.path(analysis_path, 'databases/REWOD_PAVCOND_ses_first.txt'), header = T, sep ='') # read in dataset
INST <- read.delim(file.path(analysis_path, 'databases/REWOD_INSTRU_ses_first.txt'), header = T, sep ='') # read in dataset
PIT  <- read.delim(file.path(analysis_path, 'databases/REWOD_PIT_ses_second.txt'), header = T, sep ='') # read in dataset
HED  <- read.delim(file.path(analysis_path, 'databases/REWOD_HEDONIC_ses_second.txt'), header = T, sep ='') # read in dataset
ROI_HED.lik     <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_Hed_TASK_Hed.txt'), header = T, sep ='')
ROI_HED.CSpCSm  <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_Hed_task_PIT.txt'), header = T, sep ='')
ROI_PIT.lik     <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_PIT_TASK_hedonic.txt'), header = T, sep ='')
ROI_PIT.CSpCSm  <- read.delim(file.path(analysis_path, 'databases/Betas_ROI_PIT_TASK_PIT.txt'), header = T, sep ='')
averaged_theme_regression <- theme_bw(base_size = 28, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 28, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 28),
axis.title.y = element_text(size =  28),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
averaged_theme_ttest <- theme_bw(base_size = 28, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 28, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position="none",
legend.text  = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size =  28),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
pal = viridis::inferno(n=5)
PIT.all <- PIT
fac <- c("id", "session", "condition",  "trialxcondition")
PIT.all[fac] <- lapply(PIT.all[fac], factor)
PIT <- subset (PIT.all,task == 'PIT')
PIT <- subset (PIT, condition == 'CSplus'| condition == 'CSminus')
PIT.means <- aggregate(PIT$n_grips, by = list(PIT$id, PIT$condition), FUN='mean') # extract means
colnames(PIT.means) <- c('id','condition','n_grips')
PIT.means <- ddply(PIT.means, .(id), transform, deltaCS = n_grips[condition=="CSplus"] - n_grips[condition=="CSminus"])
PIT.means <- subset(PIT.means, condition == 'CSplus')
PIT.means$deltaCS_Z  = scale(PIT.means$deltaCS, scale = F)
PIT.means$deltaCS_R = rank(PIT.means$deltaCS_Z)
PIT.index <- rename.variable(PIT.means, 'id', 'ID')
