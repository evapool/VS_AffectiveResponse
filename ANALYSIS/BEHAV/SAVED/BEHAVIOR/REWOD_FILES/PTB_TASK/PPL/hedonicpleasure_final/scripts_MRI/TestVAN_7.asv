% testing odor


function TestVAN()

var.experimentalSetup = 1;



%%%%%%%%%%%%  Experimental Set Up %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if var.experimentalSetup
    
    % Set comunication with olfactometer
    var.comport = str2num(input('Enter COMPORT olfactometer ','s'));
    oInit(var.comport,true); % Open Olfacto library
    
    % Set comunication with paralle port

        config_io;
        outp(57392, 0);
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MRI starts %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        EXPERIMENTAAL PROCEDURE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% initialize variables
nTrial = 0;  % set le compteur to 0

var.lines = (length(var.trig)*var.repetitions*var.lengthBlock); %to initialize the variables

data.liking = NaN (var.lines,1);
data.intensity = NaN (var.lines,1);
data.odorLabel = cell (var.lines,1);
data.tTrialStart = NaN (var.lines,1);
data.tTrialEnd = NaN (var.lines,1);
data.odorTrigger = NaN (var.lines,1);
data.odorSide = NaN (var.lines,1);
data.odorStim = NaN (var.lines,1);
data.Trial = NaN (var.lines,1);

%timing data: onsets
data.tValveOpen = NaN (var.lines,1);
data.tValveClose = NaN (var.lines,1);
data.sniffSignalOnset = NaN (var.lines,1);
data.likingOnset = NaN (var.lines,1);
data.intensityOnset = NaN (var.lines,1);

%timing data: durations
data.duration.SendTriggerStart= NaN (var.lines,1);
data.duration.count3= NaN (var.lines,1);
data.duration.count2= NaN (var.lines,1);
data.duration.oCommitOdor= NaN (var.lines,1);
data.duration.count1= NaN (var.lines,1);
data.duration.asterix1= NaN (var.lines,1);
data.duration.oCommitISI= NaN (var.lines,1);
data.duration.SendTriggerSniff= NaN (var.lines,1);
data.duration.asterix2= NaN (var.lines,1);
data.drift = NaN (var.lines,1);
data.duration.jitter= NaN (var.lines,1);
data.duration.Liking = NaN (var.lines,1);
data.duration.cleanKeyboardMemory1= NaN (var.lines,1);
data.duration.IQCross = NaN (var.lines,1);
data.duration.Intensity = NaN (var.lines,1);
data.duration.cleanKeyboardMemory2= NaN (var.lines,1);
data.duration.ITI = NaN (var.lines,1);% presenting a slide on the graphical interface variable and non-negletable time we will adjust the ITI to recalibrating for this time.


for r = 1: var.repetitions  

    
% We randomize the odor order presentation after every serie repetition
randomIndex = randperm(length(var.trig));

var.stim = var.stim (randomIndex);
var.side = var.side (randomIndex);
var.trig = var.trig (randomIndex);
var.trigEnd = var.trigEnd (randomIndex);
var.odorLabel_l = var.odorLabel_l (randomIndex);
var.trigSniff = var.trigSniff (randomIndex);
var.trigTrialStart = var.trigTrialStart (randomIndex);

    
    for i = 1:length(var.trig);
       
        for mb = 1:var.lengthBlock; % MiniBlock: three repetion of the same odor
            

            if var.experimentalSetup
                oStimulus(var.side (i),var.stim (i));% select odor
            end
            
            %%%%%%%%%%%%%%%%%% Count Down three two %%%%%%%%%%%%%%%%%%%%%%%
            var.ref_end = var.ref_end + 1.0; % count 3 for 1 s
            data.duration.count3(nTrial,1) = showInstruction (wPtr, three,var); %3
            
            var.ref_end = var.ref_end + 1.0; % count 2 for 1 s
            data.duration.count2(nTrial,1) = showInstruction (wPtr, two,var); %2
            
            %%%%%%%%%% Odor Release (anticipated for the scanner) %%%%%%%%%
            if var.day == 2;
            [tValve, oCommit_t] = SendOdor (var.trig (i),var);% Odor Release and record time
            data.tValveOpen (nTrial,1) = tValve;
            data.duration.oCommitOdor(nTrial,1) = oCommit_t; % record how long send odor takes
            var.ref_end = var.ref_end + data.duration.oCommitOdor(nTrial,1);% and update var.ref_end
            end
            %%%%%%%%%%%%%%%%%%%%%%%%%%% Count Down one %%%%%%%%%%%%%%%%%%%%
            var.ref_end = var.ref_end + 1.0; % count 1 for 1 s
            data.duration.count1(nTrial,1) = showInstruction (wPtr, one,var); %1
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%% Odor Release (day 1)  %%%%%%%%%%%%
            if var.day == 1;
            [tValve, oCommit_t] = SendOdor (var.trig (i),var);% Odor Release and record time
            data.tValveOpen (nTrial,1) = tValve;
            data.duration.oCommitOdor(nTrial,1) = oCommit_t; % record how long send odor takes
            var.ref_end = var.ref_end + data.duration.oCommitOdor(nTrial,1);% and update var.ref_end
            WaitSecs(0.5);
            end     
        
            %%%%%%%%%%%%%%%%%%%%%%%%%%% Sniffing signal %%%%%%%%%%%%%%%%%%%
            [time,SendTrigger_t] = SendTrigger (var.trigSniff(i),var);% send trigger and record timing variables
            data.sniffSignalOnset(nTrial,1) = time;
            data.duration.SendTriggerSniff(nTrial,1) = SendTrigger_t; % how long the function takes
            var.ref_end = var.ref_end + data.duration.SendTriggerSniff(nTrial,1);% update var.ref_end because it take 30 ms to send a trigger
            
            if var.day == 2;
            var.ref_end = var.ref_end + 1.5;%% attention this might be change in order to have an effective 2.5 s
            end
            
            if var.day == 1;
            var.ref_end = var.ref_end + 1;%% attention this might be change in order to have an effective 1.5 s
            end
            
            data.duration.asterix1(nTrial,1) = showInstruction (wPtr,asterix,var); % sniff
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%% Close Odor %%%%%%%%%%%%%%%%%%%%%%%
            if var.experimentalSetup
                oInterStimulus(var.sideISI); % select ISI air
            end
            
            [tValve, oCommit_t] = SendOdor(var.trigEnd(i),var);% release ISI air and record time
            data.tValveClose(nTrial,1) = tValve;
            data.duration.oCommitISI(nTrial,1)= oCommit_t;
            var.ref_end = var.ref_end + data.duration.oCommitISI(nTrial,1);
            
            %%%%%%%%%%%%%%%%%%% Sniffing signal continue %%%%%%%%%%%%%%%%%%
            var.ref_end = var.ref_end + 1.0;
            data.duration.asterix2(nTrial,1)= showInstruction (wPtr,asterix,var); % sniff
            
            data.drift(nTrial,1) = GetSecs()-var.time_MRI - data.tTrialStart(nTrial,1)-5.5; % until here the timing is fixed thus we can cumpute here the drift
            
            %%%%%%%%%%%%%%%%%%% Break before questions %%%%%%%%%%%%%%%%%%%%
            tjietter = randsample([0.8:1,1:1.2],1); % randomize jitter between 0.8 and 1.2
            var.ref_end = var.ref_end + tjietter;
            data.duration.jitter(nTrial,1)=showInstruction (wPtr,cross,var);
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%% Pleasantness %%%%%%%%%%%%%%%%%%%%%
            l1 = GetSecs;
            data.likingOnset(nTrial,1) = time;
            data.liking (nTrial,1) = ratingOdor(var.howPleasant,var.anchorMinPleasant,var.anchorMaxPleasant,wPtr,rect,var);
            l2 = GetSecs;
            data.duration.cleanKeyboardMemory1(nTrial,1)=cleanKeyboardMemory();
            data.duration.Liking (nTrial,1) = (l2-l1)+ data.duration.cleanKeyboardMemory1(nTrial,1);%+data.duration.SendTriggerPlesantnessQ(nTrial,1); % timing of the liking evaluation
            var.ref_end = var.ref_end + data.duration.Liking (nTrial,1);
            
            %%%%%%%%%%%%%%%%%%%%%%%%%% InterQuestionBreak %%%%%%%%%%%%%%%%%
            var.ref_end = var.ref_end + 0.5;
            data.duration.IQCross(nTrial,1)= showInstruction (wPtr, cross,var); % interquestion cross timing
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%%% Intensity %%%%%%%%%%%%%%%%%%%%%%%%
            I1 = GetSecs;
            data.intensityOnset(nTrial,1) = time;
            data.intensity (nTrial,1) = ratingOdor(var.howIntense,var.anchorMinIntense,var.anchorMaxIntense,wPtr,rect,var);
            I2 = GetSecs;
            data.duration.cleanKeyboardMemory2(nTrial,1)= cleanKeyboardMemory();
            data.duration.Intensity(nTrial,1) = (I2 -I1)+ data.duration.cleanKeyboardMemory2(nTrial,1);%+data.duration.SendTriggerIntensityQ (nTrial,1);
            var.ref_end = var.ref_end + data.duration.Intensity(nTrial,1);
            
            %%%%%%%%%%%%%%%%%%%%%%% ITI %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            ITI = 12.5 - data.duration.jitter(nTrial,1) - data.duration.Liking (nTrial)- data.duration.IQCross(nTrial,1) - data.duration.Intensity(nTrial) - data.drift(nTrial);
            
            if ITI < 0
                ITI = 0.5;
            end
            
            var.ref_end = var.ref_end + ITI;
            data.duration.ITI(nTrial,1) = showInstruction (wPtr, cross,var);
            
            %%%%%%%%%%%%%%%%%%%%%%%%%%% Save Results %%%%%%%%%%%%%%%%%%%%%%
            data.tTrialEnd(nTrial,1) = GetSecs-var.time_MRI;
            save(resultFile,'data','-append')
            
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                           END OF THE EXPERIMENT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
showInstruction (wPtr,End,var);
WaitSecs(0.4);
KbWait(-1);

oClose
Screen('CloseAll');

end